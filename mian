
---

## ✅ Python Code: `air_quality_monitor.py`

```python
import spidev
import time
import matplotlib.pyplot as plt

# SPI setup for MCP3008
spi = spidev.SpiDev()
spi.open(0, 0)
spi.max_speed_hz = 1350000

# Read analog value from channel (0-7)
def read_channel(channel):
    if channel > 7 or channel < 0:
        return -1
    adc = spi.xfer2([1, (8 + channel) << 4, 0])
    data = ((adc[1] & 3) << 8) + adc[2]
    return data

# Convert raw value (0–1023) to voltage
def convert_voltage(raw_val, vref=3.3):
    return (raw_val * vref) / 1023.0

# Convert voltage to AQ level (for basic visualization)
def get_air_quality_level(voltage):
    if voltage < 1.0:
        return "Fresh Air 😊"
    elif voltage < 1.5:
        return "Normal 😐"
    elif voltage < 2.0:
        return "Poor Air 😷"
    else:
        return "Dangerous ☠️"

# Live plot config (optional)
x_data, y_data = [], []
plt.ion()
fig, ax = plt.subplots()
line, = ax.plot(x_data, y_data)
ax.set_ylim([0, 3.3])
ax.set_xlabel('Time (s)')
ax.set_ylabel('Voltage (V)')

# Main loop
start_time = time.time()
try:
    while True:
        raw = read_channel(0)
        voltage = convert_voltage(raw)
        level = get_air_quality_level(voltage)

        current_time = time.time() - start_time
        x_data.append(current_time)
        y_data.append(voltage)

        print(f"[{round(current_time, 1)}s] Voltage: {voltage:.2f}V | Status: {level}")

        # Update plot
        if len(x_data) > 100:
            x_data.pop(0)
            y_data.pop(0)
        line.set_xdata(x_data)
        line.set_ydata(y_data)
        ax.relim()
        ax.autoscale_view()
        plt.draw()
        plt.pause(0.1)

        time.sleep(1)

except KeyboardInterrupt:
    print("\nMonitoring stopped by user.")

finally:
    spi.close()
